const axios = require('axios');
const { artistsByGenre, genericQueries } = require('./artists-data');
const ytdl = require('@distube/ytdl-core');
const fs = require('fs');
const path = require('path');

// Configuraci√≥n
const API_BASE_URL = 'http://localhost:3000';
const TARGET_SONGS = 500;  // L√≠mite seguro para no agotar cuota
const MAX_SEARCHES = 90;   // 80 b√∫squedas m√°ximo por d√≠a
const AUDIO_DIR = path.join(__dirname, '..', 'public', 'audio');

// Generar b√∫squedas din√°micamente
function generateSearchQueries() {
  const queries = [];

  // Sistema de prioridad: Official Channel > VEVO > Topic
  // B√∫squedas optimizadas para canales oficiales y embebibles
  const searchVariations = [
    // PRIORIDAD 1: Canal oficial del artista (verificado)
    { suffix: 'official audio', weight: 5 },
    { suffix: 'official video', weight: 4 },

    // PRIORIDAD 2: VEVO (casi siempre embebible)
    { suffix: 'vevo official', weight: 4 },

    // PRIORIDAD 3: Topic channels (siempre embebible)
    { suffix: 'topic official audio', weight: 5 },
    { suffix: 'topic audio', weight: 3 }
  ];

  Object.entries(artistsByGenre).forEach(([genre, artists]) => {
    artists.forEach(artist => {
      // Selecci√≥n aleatoria ponderada
      const totalWeight = searchVariations.reduce((sum, v) => sum + v.weight, 0);
      let random = Math.floor(Math.random() * totalWeight);
      let selectedVariation;

      for (const variation of searchVariations) {
        random -= variation.weight;
        if (random < 0) {
          selectedVariation = variation;
          break;
        }
      }

      queries.push({
        query: `${artist} "${selectedVariation.suffix}" -live -cover -karaoke -lyrics -mix -compilation -"best of" -"greatest hits" -playlist -album -"top 10" -"top 20" -remix -nightcore -"sped up" -slowed -instrumental -acoustic`,
        maxResults: Math.floor(Math.random() * 3) + 6, // 6-8 resultados
        genre: genre.charAt(0).toUpperCase() + genre.slice(1)
      });
    });
  });

  // Agregar b√∫squedas gen√©ricas
  queries.push(...genericQueries);

  // Mezclar aleatoriamente para variety
  return queries.sort(() => Math.random() - 0.5);
}

const searchQueries = generateSearchQueries();

// Estad√≠sticas
let stats = {
  searched: 0,
  found: 0,
  saved: 0,
  duplicates: 0,
  errors: 0
};

// Funci√≥n para hacer b√∫squeda en YouTube
async function searchSongs(query, maxResults) {
  try {
    console.log(`üîç Buscando: "${query}" (max: ${maxResults})`);

    const response = await axios.get(`${API_BASE_URL}/music/search`, {
      params: { query, maxResults }
    });

    stats.found += response.data.length;
    console.log(`‚úÖ Encontradas ${response.data.length} canciones`);
    return response.data;

  } catch (error) {
    console.error(`‚ùå Error buscando "${query}":`, error.message);
    stats.errors++;
    return [];
  }
}

// Lista de palabras prohibidas en t√≠tulos (en varios idiomas)
// OBJETIVO: Solo canciones individuales, NO compilaciones, mixes, tops, etc.
const TITLE_BLACKLIST = [
  // Mix / Mezclas / Remixes
  'mix', 'megamix', 'minimix', 'dj mix', 'remix compilation', 'mixed by',
  'mashup', 'medley', 'mezcla', 'popurri', 'popurr√≠', 'potpourri',
  'remix', 'remixes', 'remezcla',

  // Top / Mejores
  'top 10', 'top 20', 'top 30', 'top 40', 'top 50', 'top 100',
  'top songs', 'top hits', 'top music', 'top tracks',
  'lo mejor', 'the best', 'best of', 'mejores', 'best songs', 'las mejores',

  // Grandes √©xitos / Hits
  'grandes exitos', 'grandes √©xitos', 'greatest hits', 'top hits',
  'hits compilation', 'best hits', 'all hits', 'super hits', 'mega hits',
  '√©xitos', 'exitos', 'hits collection',

  // Compilaciones / Colecciones
  'compilation', 'compilaci√≥n', 'compilacion',
  'recopilaci√≥n', 'recopilacion', 'colecci√≥n', 'coleccion', 'collection',

  // √Ålbum completo
  'full album', 'album completo', '√°lbum completo', 'complete album',
  'disco completo', 'entire album', 'whole album',

  // Playlist / Listas
  'playlist', 'lista de reproducci√≥n', 'lista reproduccion',

  // N√∫meros que indican compilaciones
  'top10', 'top20', 'top30', 'top40', 'top50',

  // Horas (videos largos)
  ' hour', ' hours', ' hora', ' horas', ' hr', ' hrs',
  '1 hour', '2 hour', '3 hour', '1 hora', '2 hora', '3 hora',

  // Live/Conciertos
  'live concert', 'concierto completo', 'full concert', 'en vivo completo',
  'live', 'en vivo', 'vivo', 'ao vivo', 'live session', 'live performance',

  // Versiones modificadas / No oficiales
  'cover', 'covers', 'cover version',
  'nightcore',
  'sped up', 'spedup', 'speed up', 'fast version',
  'slowed', 'slowed down', 'reverb', 'slowed + reverb',
  'acoustic version', 'acoustic',
  '8d audio', '8d', '16d',

  // Karaoke/Lyrics/Instrumental
  'karaoke', 'lyrics video', 'letra', 'con letra',
  'instrumental', 'instrumental version',

  // Otros indicadores de compilaci√≥n
  'all songs', 'todas las canciones', 'all tracks', 'todas sus canciones',
  'discography', 'discografia', 'discograf√≠a'
];

// Funci√≥n para verificar si el t√≠tulo contiene palabras prohibidas
function hasBannedWords(title) {
  const lowerTitle = title.toLowerCase();
  return TITLE_BLACKLIST.some(word => lowerTitle.includes(word));
}

// Funci√≥n para descargar MP3 de YouTube usando Cobalt API
async function downloadMP3(youtubeId) {
  const url = `https://www.youtube.com/watch?v=${youtubeId}`;
  const outputPath = path.join(AUDIO_DIR, `${youtubeId}.mp3`);

  // Verificar si ya existe
  if (fs.existsSync(outputPath)) {
    console.log(`   ‚úÖ Audio ya existe: ${youtubeId}.mp3`);
    return `audio/${youtubeId}.mp3`;
  }

  console.log(`   ‚¨áÔ∏è  Descargando audio con Cobalt...`);

  try {
    // Paso 1: Solicitar URL de descarga a Cobalt API (usando instancia sin auth)
    const cobaltResponse = await axios.post('https://cobalt-api.meowing.de/', {
      url: url,
      audioFormat: 'mp3',
      youtubeBetterAudio: true
    }, {
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      timeout: 30000 // 30 segundos timeout
    });

    // Verificar respuesta de Cobalt
    if (!cobaltResponse.data || !cobaltResponse.data.url) {
      throw new Error(`Cobalt no devolvi√≥ URL de descarga: ${JSON.stringify(cobaltResponse.data)}`);
    }

    const downloadUrl = cobaltResponse.data.url;
    console.log(`   üì• URL obtenida, descargando archivo...`);

    // Paso 2: Descargar el archivo MP3 desde la URL proporcionada
    const audioResponse = await axios.get(downloadUrl, {
      responseType: 'stream',
      timeout: 60000 // 60 segundos para descargar
    });

    // Paso 3: Guardar el archivo
    const writeStream = fs.createWriteStream(outputPath);
    audioResponse.data.pipe(writeStream);

    return new Promise((resolve, reject) => {
      writeStream.on('finish', () => {
        console.log(`   ‚úÖ Audio descargado: ${youtubeId}.mp3`);
        resolve(`audio/${youtubeId}.mp3`);
      });

      writeStream.on('error', (error) => {
        console.error(`   ‚ùå Error escribiendo archivo: ${error.message}`);
        if (fs.existsSync(outputPath)) {
          fs.unlinkSync(outputPath);
        }
        reject(error);
      });
    });

  } catch (error) {
    console.error(`   ‚ùå Error descargando con Cobalt: ${error.message}`);
    if (error.response) {
      console.error(`   Response status: ${error.response.status}`);
      console.error(`   Response data:`, error.response.data);
    }
    // Eliminar archivo incompleto si existe
    if (fs.existsSync(outputPath)) {
      fs.unlinkSync(outputPath);
    }
    throw error;
  }
}

// Funci√≥n para guardar canci√≥n en BD
async function saveSong(song, genre) {
  try {
    // FILTRO 1: Verificar duraci√≥n (entre 60 y 600 segundos = 1-10 minutos)
    if (!song.duration || song.duration < 60 || song.duration > 600) {
      console.log(`‚è≠Ô∏è Omitida (duraci√≥n ${song.duration}s): "${song.title}"`);
      return false;
    }

    // FILTRO 2: Verificar youtubeId v√°lido
    if (!song.id) {
      console.log(`‚è≠Ô∏è Omitida (sin youtubeId): "${song.title}"`);
      return false;
    }

    // FILTRO 3: Verificar palabras prohibidas en el t√≠tulo
    if (hasBannedWords(song.title)) {
      console.log(`‚è≠Ô∏è Omitida (t√≠tulo prohibido): "${song.title}"`);
      return false;
    }

    // FILTRO 4: M√≠nimo 1000 vistas
    if (!song.viewCount || song.viewCount < 1000) {
      console.log(`‚è≠Ô∏è Omitida (pocas vistas: ${song.viewCount || 0}): "${song.title}"`);
      return false;
    }

    // Guardar en la base de datos SIN audioPath (se descargar√° despu√©s)
    const songData = {
      title: song.title,
      artist: song.artist,
      youtubeId: song.id,
      duration: song.duration,
      viewCount: song.viewCount,
      publishedAt: song.publishedAt,
      genre: genre
      // audioPath: se agregar√° despu√©s con download-mp3.js
    };

    await axios.post(`${API_BASE_URL}/music/songs`, songData);

    console.log(`üíæ Guardada: "${song.title}" por ${song.artist} (${song.duration}s)`);
    stats.saved++;
    return true;

  } catch (error) {
    if (error.response?.status === 409) {
      // Canci√≥n duplicada (ya existe)
      console.log(`‚ö†Ô∏è Duplicada: "${song.title}"`);
      stats.duplicates++;
    } else {
      console.error(`‚ùå Error guardando "${song.title}":`, error.message);
      stats.errors++;
    }
    return false;
  }
}

// Funci√≥n principal
async function seedMusic() {
  console.log('üéµ INICIANDO PRECARGA DE M√öSICA');
  console.log('=================================');
  console.log(`Meta: ${TARGET_SONGS} canciones`);
  console.log(`L√≠mite de b√∫squedas: ${MAX_SEARCHES}`);
  console.log('');

  for (const searchQuery of searchQueries) {
    // Control de l√≠mite de b√∫squedas
    if (stats.searched >= MAX_SEARCHES) {
      console.log(`üõë L√≠mite de b√∫squedas alcanzado (${MAX_SEARCHES})`);
      console.log('üí° Ejecuta ma√±ana para continuar sin agotar cuota');
      break;
    }

    stats.searched++;

    // Buscar canciones en YouTube
    const songs = await searchSongs(searchQuery.query, searchQuery.maxResults);

    // Guardar cada canci√≥n encontrada
    for (const song of songs) {
      await saveSong(song, searchQuery.genre);

      // Pausa peque√±a para no saturar la API
      await new Promise(resolve => setTimeout(resolve, 100));
    }

    console.log('');

    // Si ya tenemos suficientes canciones, parar
    if (stats.saved >= TARGET_SONGS) {
      console.log(`üéØ Meta alcanzada: ${stats.saved} canciones guardadas`);
      break;
    }
  }

  // Resumen final
  console.log('');
  console.log('üìä RESUMEN FINAL');
  console.log('================');
  console.log(`B√∫squedas realizadas: ${stats.searched}/${MAX_SEARCHES}`);
  console.log(`Canciones encontradas: ${stats.found}`);
  console.log(`Canciones guardadas: ${stats.saved}/${TARGET_SONGS}`);
  console.log(`Duplicadas (omitidas): ${stats.duplicates}`);
  console.log(`Errores: ${stats.errors}`);
  console.log('');

  if (stats.saved > 0) {
    console.log('‚úÖ Precarga completada exitosamente!');
    if (stats.saved < TARGET_SONGS && stats.searched < MAX_SEARCHES) {
      console.log('üí° Puedes ejecutar de nuevo para agregar m√°s canciones');
    }
  } else {
    console.log('‚ùå No se pudo guardar ninguna canci√≥n');
  }

  console.log('');
  console.log('üîÑ Para continuar ma√±ana: npm run seed:music');
}

// Verificar que el servidor est√© corriendo
async function checkServer() {
  try {
    await axios.get(`${API_BASE_URL}/music/songs/count`);
    console.log('‚úÖ Servidor conectado');
    return true;
  } catch (error) {
    console.error('‚ùå Error: El servidor no est√° corriendo en localhost:3000');
    console.error('üí° Ejecuta: npm run start:dev');
    return false;
  }
}

// Ejecutar script
async function main() {
  const serverRunning = await checkServer();
  if (serverRunning) {
    await seedMusic();
  }
}

main().catch(console.error);